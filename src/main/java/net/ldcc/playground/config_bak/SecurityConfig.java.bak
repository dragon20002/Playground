package net.ldcc.playground.config_bak;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;

import java.util.Arrays;

@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {

    /**
     * CORS 허용 Origin에 대한 White-List 추가
     */
    @Bean
    public CorsConfigurationSource corsConfigurationSource() {
        // Origins White-List
        CorsConfiguration configuration = new CorsConfiguration();
        configuration.setAllowedOrigins(Arrays.asList(
                "http://localhost:8080",
                "http://localhost:8081"));

        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", configuration);
        return source;
    }

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.headers()
                .frameOptions()
                .sameOrigin()
            .and()
                .csrf()
                .ignoringAntMatchers("/api/**")
                .ignoringAntMatchers("/h2-console/**")
            .and()
                .cors()
            .and()
                .authorizeRequests()
                .antMatchers("/api/members/**").hasRole("USER")
                .antMatchers("/**").permitAll()
            .and()
                .formLogin()
//                .authenticationDetailsSource()
            .and()
                .logout()
                .logoutSuccessUrl("/");
    }

}
